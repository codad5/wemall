<?php
use \Api\Payment;
    Class Order extends Dbh implements needAuth {
        /**  
         * This is the customer email in which the Order will be registered with.
        * @param String $email
        */
        protected String $email;

        
        /**
         * This is the total number of item order.
         * @param int $order_quantity
         */
        protected int $order_quantity;


        /**
         * This is the accumulative (total)  order price.
         * @param int $order_price
         */
        protected int $order_price = 0;


        /**
         * This is the order id auto generated by this classes
         * @param String $order_id
         */
        public $order_id;


        /**
         * This is the method choosed by the Costumer in purchasing item
         * 
         * https://github.com/codad5/wemall
         * @param Payment\Payment_method $Payment_method
         */
        public Payment\Payment_method $payment_method;


        /**
         * This is where all the payment info is been stored. <br/>
         * @param Array $payment_details
         */
        public Array $payment_details;

        /**
         * This is the JWT token assigned during login.
         * @param String $JWT_token
         */
        protected String $JWT_token;

        public Array $productList;

        /**
         * The Constructor any Class With implementation needAuth needs to have a $token
         * 
         * @param String $token
         * <br/>JWT token assign and needed for validation purpose
         * 
         * @param String $email
         * <br/>Email assigned to user account
         * 
         * @param int $order_quantity
         * <br/>Email assigned to user account
         * 
         * @param Payment\Payment_method $payment_method
         * <br/>Object Class of purposed Payment method
         * 
         * @return void
         */
        public function __construct($token, $email,  $order_quantity, Payment\Payment_method $payment_method){
            $this->email = $email;
            $this->order_quantity = $order_quantity;
            $this->JWT_token = $token;
            $this->order_id = md5(uniqid('', true), true);
            $this->payment_method = $payment_method;
            
            
            $emptyData = $this->check_empty(["email"=>$this->email, "product_id"=>$this->order_id, "order_quantity"=>$this->order_quantity, "JWT_token" => $this->JWT_token]);
            if($emptyData['error']):
                $this->endrequest($emptyData);
            endif;
            $validate_data_type = $this->validate_data([$this->order_id, FILTER_SANITIZE_STRING],[(int) $this->order_quantity, FILTER_VALIDATE_INT],[$this->email, FILTER_VALIDATE_EMAIL],[ $this->JWT_token, FILTER_SANITIZE_STRING]);
            if($validate_data_type['error']):
                $this->endrequest($validate_data_type);
            endif;
        }

        /**
         * This is to validate the user login (JWT_TOKEN)
         * @return bool
         * returns `true` if passed validation 
         * <br> returns `false` if failed validation
         */

        public function validateAuth(){
            try{
                $this->JWT_validate($this->JWT_token, $this->email);
            }catch(\Exception $e){
                return false;
            }
            return true;
        }

        /**
         * Your will loop the `$_POST['cart']` then pass every single cart item into this to add item
         * @param Array $product_detail
         * This is an array carring all info about an item in the order list (Cart)
         * @return bool|Array
         * return `false` on connect error 
         * return `Array` on ` $product_detail `  (cart item) error
         * else return `true` 
         * 
         */
        public function registerProduct($product_detail){
            $product = $this->get_product('detail',$product_detail['data']['product_id']);
            $quantity = $product_detail['quantity'];
            $this->order_price +=  (int) ($product['sell_price'] * $quantity);

            $this->productList[] = $product_detail;
            return true;
        }
        public function saveProduct($product_detail) {
            try{

                $product = $this->get_product('detail',$product_detail['data']['product_id']);
                $product['sell_price'] = $this->gen_sell_price($product['product_price'], $product['product_discount'], $product['discount_method'])['validate'];
                $quantity = $product_detail['quantity'];
                // $sale_price = $product['data'][''];
                $sql = "INSERT INTO ordersItems (email, product_name, product_id,  quantity, sales_price,  total_price, order_id) VALUES(?,?,?,?,?,?,?)";
                $stmt = $this->connect()->prepare($sql);
                if(!$stmt->execute(array($this->email, $product['product_name'],$product['product_id'], $quantity, $product['sell_price'], (int) ($product['sell_price'] * $quantity) , $this->order_id))){
                    $stmt = null;
                    return false;
                    

                }
            }catch(Exception $e){
                // $this->message = $e->getMessage();
                // $this->error = true;
                $result['error'] = true;
                $result['product_id'] = $product['product_id'];
               $result['message'] = $e->getMessage();
                return $result;
            }
            return true;

        }
        /**
         * This initial the Payment Process and Store Order in the Database
         * @return bool|Array
         * return `Array` at failure --
         * return `array['message']` contains error log
         * 
         * return `true` if successful
         * 
         */
        public function implementOrder(){
            
            try{
                $this->payment_details = $this->payment_method->init($this->order_price);}
            catch(Exception $e){
                return ['error' => true ,"message" => $e->getMessage()];
            }
            foreach ($this->productList as $products):
                if($this->saveProduct($products) !== true):
                    return ['error' => true, 'message' => ' error with Product'.$products['data']['product_id']];

                endif;
            endforeach;
            
            $sql = "INSERT INTO orders (email, quantity,  total_price, order_id,  payment_id) VALUES(?,?,?,?,?)";
            $stmt = $this->connect()->prepare($sql);
                if(!$stmt->execute(array($this->email, $this->order_quantity,$this->order_price, $this->order_id, $this->payment_method->refrence))){
                    $stmt = null;
                    return ['error' => true, 'message' => 'Database error'];
                    

                }
            return true;
        }

        
    }